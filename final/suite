"""
 * Initial code for Assignment
 * Programming Language Principles
 * Author: Võ Tiến
 * Link FB : https://www.facebook.com/profile.php?id=100056605580171
 * Link Group : https://www.facebook.com/groups/211867931379013
 * Date: 02.04.2024
"""
import unittest
from TestUtils import TestCodeGen
import inspect
from AST import *




"""
    (
    cd java_byte_code/test_000 

    && 

    java  -jar ../jasmin.jar MiniGoClass.j 

    && 

    java -cp ../_io:. MiniGoClass
    )
    
    java -cp ../_io;. MiniGoClass)
"""
class CodeGenSuite(unittest.TestCase):

    def test_001(self):
        input = """
func foo(a int, c int) {
    var b = a + c;
    putInt(b)
}
func main() {
    foo(2, 3)
}
func foo1() int {return 1;}
        """
        self.assertTrue(TestCodeGen.test(input, "5", inspect.stack()[0].function))  

    def test_002(self):
        input = """
func foo() int {return foo1();}
var a = foo() + foo1();
func main() {
    putInt(a)
    a := foo()
    putInt(a)
}
func foo1() int {return 1;}
        """
        self.assertTrue(TestCodeGen.test(input, "21", inspect.stack()[0].function))   

# test_001
    def test_003(self):
        input = """
func fvoid() {putStringLn("VoTien");}

var global = fint()
func main() {
    fvoid();
    putFloatLn(global + 2.0)

    var local = "a";
    putBoolLn(local <= "b")
    local += "c"
    putStringLn(local)

};

func fint() int {return 1;}
"""
        self.assertTrue(TestCodeGen.test(input,"VoTien\n3.0\ntrue\nac\n",inspect.stack()[0].function)) 

    def test_004(self):
        input ="""
func main() {
    var a = 1;
    putInt(a)
}
        """
        self.assertTrue(TestCodeGen.test(input, "1", inspect.stack()[0].function))



    def test_005(self):
        input ="""
func main() {putBoolLn(true);putBool(false);};
        """
        output = """true\nfalse"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))

# test 011
    def test_006(self):
        input ="""
func main() {
    putIntLn(2 - 3)
    putFloatLn(2 - 3.0)
    putFloatLn(2.0 - 3)
    putFloatLn(2.0 - 3.0)
}
        """
        output = """-1
-1.0
-1.0
-1.0
"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))


# test 014
    def test_007(self):
        input ="""
func main() {
    putIntLn(2 * 3)
    putFloatLn(2 * 3.0)
    putFloatLn(2.0 * 3)
    putFloatLn(2.0 * 3.0)
}
        """
        output = """6
6.0
6.0
6.0
"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))

# test 020
    def test_008(self):
        input ="""
func main() {
    putBoolLn("apple" > "banana")     // False
    putBoolLn("apple" < "banana")     // True
    putBoolLn("apple" <= "apple")     // True
    putBoolLn("banana" >= "apple")    // True
    putBoolLn("hello" == "hello")     // True
    putBoolLn("hello" != "hello")     // False
}
        """
        output = """false
true
true
true
true
false
"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))

# test 024
    def test_009(self):
        input ="""
func main() {
    putBoolLn(! true)
    putBoolLn(! false)
    putIntLn(-1)
    putFloatLn(-1.0)
}
        """
        output = """false
true
-1
-1.0
"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))

# test 032
    def test_010(self):
        input ="""
func foo() int {return 1;}        

func main() {
    putInt(foo())
}
        """
        output = """1"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))

# test 037
    def test_011(self):
        input ="""
var a = 1;
func main() {
    b := a + 1;
    putInt(a)
    putInt(b)
}
   
        """
        output = """12"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))

# test 047
    def test_012(self):
        input ="""
func main() {
    a := getInt()
    putInt(a)
}
        """
        output = """50"""
        self.assertTrue(TestCodeGen.test(input, output, inspect.stack()[0].function))

# test 053
    def test_013(self):
        input = """
func main() {
    var a [2] int = [2] int {10, 20};
    putInt(a[0])
}
    """
        self.assertTrue(TestCodeGen.test(input,"10",inspect.stack()[0].function))

# test 055
    def test_014(self):
        input = """
func main() {
    var a [2][3] int = [2][3] int {{10, 20, 30}, {40, 50, 60}};
    putInt(a[1][0])
}
    """
        self.assertTrue(TestCodeGen.test(input,"40",inspect.stack()[0].function))

# test 058
    def test_015(self):
        input = """
func main() {
    var a [2][3] int ;
    putInt(a[0][0])
    putInt(a[0][1])
    putInt(a[0][2])
    putInt(a[1][0])
    putInt(a[1][1])
    putInt(a[1][2])
}
    """
        self.assertTrue(TestCodeGen.test(input,"000000",inspect.stack()[0].function))

# func main() {
#     var a [2] int;
#     a[0] := 100
#     a[1] += a[0] + a[0]
#     putInt(a[1])
# }


# var a [2] int;
# func main() {
#     a[0] := 100
#     a[1] += a[0] + a[0]
#     putInt(a[1])
# }
# test 077
    def test_016(self):
        input = """
func main() {
    var a [2] int;
    a[0] := 100
    a[1] += a[0] + a[0]
    putInt(a[1])
}
    """
        self.assertTrue(TestCodeGen.test(input,"200",inspect.stack()[0].function))

# test_090
    def test_017(self):
        input = """
func main() {
    var a [1] int ;
    a[0] := 1
    putInt(a[0]);
}
    """
        self.assertTrue(TestCodeGen.test(input,"1",inspect.stack()[0].function))

# test_091
    def test_018(self):
        input = """
func main() {
    var a [1][1][1] int  = [1][1][1] int {{{0}}};
    a[0][0][0] := 1
    putInt(a[0][0][0]);
}
    """
        self.assertTrue(TestCodeGen.test(input,"1",inspect.stack()[0].function))


# * if ------------------------------------------------------

# test_096
    def test_019(self):
        input = """
func main() {
    if (true) {
        putBool(true)
    } 
}
    """
        self.assertTrue(TestCodeGen.test(input,"true",inspect.stack()[0].function))

# test_097
    def test_020(self):
        input = """
func main() {
    if (true) {
        putBool(true)
    } else {
        putBool(false)     
    }
}
    """
        self.assertTrue(TestCodeGen.test(input,"true",inspect.stack()[0].function))

# test_098
    def test_021(self):
        input = """
func main() {
    if (false) {
        putBool(true)
    } else {
        putBool(false)     
    }
}
    """
        self.assertTrue(TestCodeGen.test(input,"false",inspect.stack()[0].function))


# # *for test ------------------------------------------------------------

# test_113
    def test_022(self):
        input = """
func main() {
    var i = 0;
    for i < 3 {
        putInt(i);
        i += 1;
    }
    putInt(i);
}
        """
        self.assertTrue(TestCodeGen.test(input, "0123", inspect.stack()[0].function))

# test_114
    def test_023(self):
        input = """
func main() {
    var i = 0;
    for i < 5 {
        if (i == 3) {
            break;
        }
        putInt(i);
        i += 1;
    }
    putInt(i);
}
        """
        self.assertTrue(TestCodeGen.test(input, "0123", inspect.stack()[0].function))


# test_115
    def test_024(self):
        input = """
func main() {
    var i = 0;
    for i < 5 {
        i += 1;
        if (i % 2 == 0) {
            continue;
        }
        putInt(i);
    }
    putInt(i);
}
        """
        self.assertTrue(TestCodeGen.test(input, "1355", inspect.stack()[0].function))


# # *for step------------------------------------------------------------

# test_126
    def test_025(self):
        input = """
func main() {
    var i int = 10;
    for var i int = 0; i < 2; i += 1 {
        putIntLn(i)
        break;
    }
    putInt(i)
}
        """
        self.assertTrue(TestCodeGen.test(input, "0\n10", inspect.stack()[0].function))

# test_125
    def test_026(self):
        input = """
func main() {
    var i int = 10;
    for var i int = 0; i < 2; i += 1 {
        putIntLn(i)
    }
    putInt(i)
}
        """
        self.assertTrue(TestCodeGen.test(input, "0\n1\n10", inspect.stack()[0].function))


# # *const test------------------------------------------------------------


# test_137
    def test_027(self):
        input = """
const a = 1 + 1
const c = 5 - a
func main() {
  var b [a][c] int;
  putInt(b[0][0]);
  b[0][0] := 20;
  putInt(b[0][0]);
}
      """
        self.assertTrue(TestCodeGen.test(input, "020", inspect.stack()[0].function))


    def test_028(self):
        input ="""
var a float = 3;
func main() {
    putFloatLn(a)
    var a float = 4;
    putFloatLn(a)
    a := 2
    putFloat(a)
}
        """
        self.assertTrue(TestCodeGen.test(input, "3.0\n4.0\n2.0", inspect.stack()[0].function))


# # * method, struct test------------------------------------------------------------

# type Course interface {study();}
# type PPL3 struct {number int;}
# func (p PPL3) study() {putInt(p.number);}

# func main(){
#     var a PPL3 = PPL3 {number: 10}
#     putIntLn(a.number)
#     a.study()
# }





# ? type PPL3 struct {number int;} => structtype


#? vardecl = PPL3 {number: 10}  => structliteral
#? a.number => fieldaccess
#? a.study() => methodcall

# test 141
    def test_029(self):
        input = """
type Course interface {study();}
type PPL3 struct {number int;}
func (p PPL3) study() {putInt(p.number);}

func main(){
    var a PPL3 = PPL3 {number: 10}
    putIntLn(a.number)
    a.study()
}
        """
        self.assertTrue(TestCodeGen.test(input, "10\n10", inspect.stack()[0].function))



#? InterfaceType(Course,[Prototype(study,[],VoidType)]
# type Course interface {study();}              
#? StructType(PPL3,[(number,IntType)],[])
# type PPL3 struct {number int;}                
#? MethodDecl(p,Id(PPL3),FuncDecl(study,[],VoidType,Block([FuncCall(putInt,[FieldAccess(Id(p),number)])])))
# func (p PPL3) study() {putInt(p.number);}

# func main(){
#? VarDecl(a,Id(Course),Nil)
#     var a Course = nil            
#? Assign(Id(a),StructLiteral(PPL3,[(number,IntLiteral(10))]))
#     a := PPL3 {number: 10}        
#? MethodCall(Id(a),study,[])]))])
#     a.study()                     
# }

# test 141
    def test_030(self):
        input = """
type Course interface {study();}
type PPL3 struct {number int;}
func (p PPL3) study() {putInt(p.number);}

func main(){
    var a Course = nil
    a := PPL3 {number: 10}
    a.study()
}
        """
        self.assertTrue(TestCodeGen.test(input, "10", inspect.stack()[0].function))        



# test 143
    def test_031(self):
        input = """
type PPL3 struct {number int;}

func main(){
    var a PPL3 = PPL3 {number: 10}
    putInt(a.number)
}
        """
        self.assertTrue(TestCodeGen.test(input, "10", inspect.stack()[0].function))

# test 144
    def test_032(self):
        input = """
type PPL3 struct {number int;}

func main(){
    var a PPL3
    a.number := 10
    putInt(a.number)
}
        """
        self.assertTrue(TestCodeGen.test(input, "10", inspect.stack()[0].function))

# test 145
    def test_033(self):
        input = """
type PPL2 struct {number int;}
type PPL3 struct {number int; ppl PPL2;}

func main(){
    var a PPL3
    a.ppl := PPL2 {number: 10}
    putInt(a.ppl.number)
}
        """
        self.assertTrue(TestCodeGen.test(input, "10", inspect.stack()[0].function))

# test 146
    def test_034(self):
        input = """
type PPL2 struct {number int;}
type PPL3 struct {number int; ppl PPL2;}

func main(){
    var a PPL3
    a.ppl := PPL2 {number: 10}
    a.ppl.number := 100
    putInt(a.ppl.number)
}
        """
        self.assertTrue(TestCodeGen.test(input, "100", inspect.stack()[0].function))        

# test 147
    def test_035(self):
        input = """
type Study interface { study(); }
type Play interface { play(); }

type PPL3 struct {number int;}

func (p PPL3) study() { putInt(p.number); }
func (p PPL3) play()  { putInt(p.number + 5); }

func main() {
    var a PPL3 = PPL3 {number: 1}
    a.study()
    a.play()
}
        """
        self.assertTrue(TestCodeGen.test(input, "16", inspect.stack()[0].function))


# test 148
    def test_036(self):
        input = """
type Study interface { study(); }
type Play interface { play(); }

type PPL3 struct {number int;}

func (p PPL3) study() { putInt(p.number); }
func (p PPL3) play()  { putInt(p.number + 5); }

func main() {
    var a PPL3 = PPL3 {number: 1}
    var b Study = a
    var c Play = a
    b.study()
    c.play()
}
        """
        self.assertTrue(TestCodeGen.test(input, "16", inspect.stack()[0].function))

# test 148
    def test_037(self):
        input = """
type Study interface { study(); }
type Play interface { play(); }

type PPL3 struct {number int;}

func (p PPL3) study() { putInt(p.number); }
func (p PPL3) play()  { putInt(p.number + 5); }

func main() {
    var a PPL3 = PPL3 {number: 1}
    var b Study = a
    var c Play = a
    b.study()
    c.play()
}
        """
        self.assertTrue(TestCodeGen.test(input, "16", inspect.stack()[0].function))

# test 149
    def test_038(self):
        input = """
type Worker interface { 
    study(); 
    play(); 
}

type PPL4 struct {number int;}
type PPL5 struct {number int;}

// Implement Worker cho PPL4
func (p PPL4) study() { putInt(p.number); }
func (p PPL4) play()  { putInt(p.number + 5); }

// Implement Worker cho PPL5
func (p PPL5) study() { putInt(p.number * 2); }
func (p PPL5) play()  { putInt(p.number * 3); }

func main() {
    var w1 Worker = PPL4 {number: 3}
    var w2 Worker = PPL5 {number: 4}

    w1.study(); // in: 3
    w1.play();  // in: 8

    w2.study(); // in: 8
    w2.play();  // in: 12
}
        """
        self.assertTrue(TestCodeGen.test(input, "38" "812", inspect.stack()[0].function))

# test 150
    def test_039(self):
        input = """
type Worker interface { 
    study(); 
    play(); 
}

type PPL4 struct {number int;}
type PPL5 struct {number int;}

// Implement Worker cho PPL4
func (p PPL4) study() { putInt(p.number); }
func (p PPL4) play()  { putInt(p.number + 5); }

// Implement Worker cho PPL5
func (p PPL5) study() { putInt(p.number * 2); }

func main() {
    var w1 Worker = PPL4 {number: 3}
    var w2 PPL5 = PPL5 {number: 4}

    w1.study(); // in: 3
    w1.play();  // in: 8

    w2.study(); // in: 8
}
        """
        self.assertTrue(TestCodeGen.test(input, "38" "8", inspect.stack()[0].function))


# test 151
    def test_040(self):
        input = """
type Speaker interface { speak(); }

type Human struct {name int; }

func (h Human) speak() { putIntLn(h.name); }

func saySomething(s Speaker) {
    s.speak();
}

func main() {
    var h Speaker = Human {name: 2025};
    saySomething(h);
}
        """
        self.assertTrue(TestCodeGen.test(input, "2025\n", inspect.stack()[0].function))


# test 152
    def test_041(self):
        input = """
type Speaker interface { speak(); }

type Human struct { name int; }

func (h Human) speak() { putIntLn(h.name); }

func main() {
    var people [3]Speaker;

    people[0] := Human {name: 1};
    people[1] := Human {name: 2};
    people[2] := Human {name: 3};

    people[0].speak(); // Output: 1
    people[1].speak(); // Output: 2
    people[2].speak(); // Output: 3
}
        """
        self.assertTrue(TestCodeGen.test(input, "1\n2\n3\n", inspect.stack()[0].function))

# test 153
    def test_042(self):
        input = """
type Speaker interface { speak(); }

type Human struct { name int; }

func (h Human) speak() { putIntLn(h.name); }

func main() {
    var people [3]Human;

    people[0] := Human {name: 1};
    people[1] := Human {name: 2};
    people[2] := Human {name: 3};

    people[0].speak(); // Output: 1
    people[1].speak(); // Output: 2
    people[2].speak(); // Output: 3
}
        """
        self.assertTrue(TestCodeGen.test(input, "1\n2\n3\n", inspect.stack()[0].function))

# test 154
    def test_043(self):
        input = """
type Calculator struct { x int; y int; }

func (c Calculator) sum() int {
    return c.x + c.y;
}

func main() {
    var cal Calculator = Calculator {x: 7, y: 8};
    var result int = cal.sum();
    putIntLn(result);
}
        """
        self.assertTrue(TestCodeGen.test(input, "15\n", inspect.stack()[0].function))

# test 155
    def test_044(self):
        input = """
type Calculator interface { sum() int; }

type BasicCalc struct { x int; y int; }

func (b BasicCalc) sum() int {
    return b.x + b.y;
}

func main() {
    var c Calculator = BasicCalc {x: 5, y: 15};
    var result int = c.sum();
    putIntLn(result);
}
        """
        self.assertTrue(TestCodeGen.test(input, "20\n", inspect.stack()[0].function))

# test 156
    def test_045(self):
        input = """
type Speaker interface { speak(); }

type Human struct { name int; }

func (h Human) speak() { putIntLn(h.name); }

func sayHello(s Speaker) {
    s.speak();
}

func main() {
    var h Human = Human {name: 100};
    sayHello(h);
}
        """
        self.assertTrue(TestCodeGen.test(input, "100\n", inspect.stack()[0].function))

# test 157
    def test_046(self):
        input = """
type Calculator interface { sum() int; }

type BasicCalc struct { x int; y int; }

func (b BasicCalc) sum() int {
    return b.x + b.y;
}

func calculate(c Calculator) int {
    return c.sum();
}

func main() {
    var b BasicCalc = BasicCalc {x: 20, y: 30};
    var result int = calculate(b);
    putIntLn(result);
}
        """
        self.assertTrue(TestCodeGen.test(input, "50\n", inspect.stack()[0].function))

# test 158
    def test_047(self):
        input = """
type Multiplier struct { factor int; }

func (m Multiplier) multiply(value int) int {
    return m.factor * value;
}

func main() {
    var mul Multiplier = Multiplier {factor: 5};
    var result int = mul.multiply(4);
    putIntLn(result);
}
        """
        self.assertTrue(TestCodeGen.test(input, "20\n", inspect.stack()[0].function))

# test 159
    def test_048(self):
        input = """
type Calculator interface { calculate(a int, b int) int; }

type BasicCalc struct {number int;}

func (b BasicCalc) calculate(a int, b int) int {
    return a + b;
}

func main() {
    var c Calculator = BasicCalc {};
    var result int = c.calculate(15, 25);
    putIntLn(result);
}
        """
        self.assertTrue(TestCodeGen.test(input, "40\n", inspect.stack()[0].function))


# test 160
    def test_049(self):
        input = """
type Calculator interface { calculate(a int, b int); }

type BasicCalc struct {number int;}

func (b BasicCalc) calculate(a int, b int) {
    putIntLn(a+b);
}

func main() {
    var c Calculator = BasicCalc {};
    c.calculate(15, 25);
}
        """
        self.assertTrue(TestCodeGen.test(input, "40\n", inspect.stack()[0].function))

# test  161
    def test_050(self):
        input = """
type Calculator interface { calculate(a int, b int); }

type BasicCalc struct {number int;}

func (b BasicCalc) calculate(a int, b int) {
    putIntLn(a+b);
}

func main() {
    var c BasicCalc
    c.calculate(15, 25);
}
        """
        self.assertTrue(TestCodeGen.test(input, "40\n", inspect.stack()[0].function))

# test 162
    def test_051(self):
        input = """
type Speaker interface { speak(); }

type Human struct { name int; }

func (h Human) speak() {
    putIntLn(h.name);
}

type Classroom struct {
    student Human;
    guest Speaker;
}

func main() {
    var h Human = Human {name: 777};
    var k Speaker = Human {name: 999};
    var room Classroom = Classroom {student: h, guest: k};

    putIntLn(room.student.name);
    room.guest.speak();
}
        """
        self.assertTrue(TestCodeGen.test(input, "777\n999\n", inspect.stack()[0].function))

# test 163
    def test_052(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func main() {
        var p Person = Person{name: "Alice", age: 22};
        putStringLn(p.name);
        putIntLn(p.age);
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Alice\n22\n", inspect.stack()[0].function))

# test 164
    def test_053(self):
        input = """
    type Greeter interface { greet(); }

    type Person struct {
        name string;
        age int;
    }
    func (p Person) greet() {
        putStringLn(p.name);
    }

    func main() {
        var g Greeter = Person{name: "Bob", age: 30};
        g.greet();
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Bob\n", inspect.stack()[0].function))

# test 165
    def test_054(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func (p Person) agePlus(n int) int {
        return p.age + n;
    }
    func main() {
        var p Person = Person{name: "Charlie", age: 18};
        var result int = p.agePlus(5);
        putIntLn(result);
    }
        """
        self.assertTrue(TestCodeGen.test(input, "23\n", inspect.stack()[0].function))

# test 166
    def test_055(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func sumAges(p1 Person, p2 Person) int {
        return p1.age + p2.age;
    }
    func main() {
        var p1 Person = Person{name: "Dan", age: 20};
        var p2 Person = Person{name: "Eve", age: 25};
        var total int = sumAges(p1, p2);
        putIntLn(total);
    }
        """
        self.assertTrue(TestCodeGen.test(input, "45\n", inspect.stack()[0].function))

# test 167
    def test_056(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func (p Person) printInfo() {
        putStringLn(p.name);
        putIntLn(p.age);
    }
    func main() {
        var people [1]Person
        people[0] := Person{name: "Anna", age: 19};
        people[0].printInfo() 
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Anna\n19\n", inspect.stack()[0].function))

# test 168
    def test_057(self):
        input = """
    type Speaker interface { speak(); }
    type Person struct {
        name string;
        age int;
    }
    func (p Person) speak() {
        putStringLn(p.name);
    }
    func announce(s Speaker) {
        s.speak();
    }
    func main() {
        var p Person = Person{name: "Grace", age: 27};
        announce(p);
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Grace\n", inspect.stack()[0].function))

# test 169
    def test_058(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func createPerson(n string, a int) Person {
        return Person{name: n, age: a};
    }
    func main() {
        var p Person = createPerson("Helen", 24);
        putStringLn(p.name);
        putIntLn(p.age);
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Helen\n24\n", inspect.stack()[0].function))

# test 170
    def test_059(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func (p Person) isAdult() boolean {
        return p.age >= 18;
    }
    func main() {
        var p Person = Person{name: "Ivy", age: 17};
        if (p.isAdult()) {
            putStringLn("Adult");
        } else {
            putStringLn("Minor");
        }
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Minor\n", inspect.stack()[0].function))

# test 171
    def test_060(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func (p Person) duplicate() Person {
        return Person{name: p.name, age: p.age};
    }
    func main() {
        var p1 Person = Person{name: "Jack", age: 31};
        var p2 Person = p1.duplicate();
        putStringLn(p2.name);
        putIntLn(p2.age);
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Jack\n31\n", inspect.stack()[0].function))

# test 172
    def test_061(self):
        input = """
    type Person struct {
        name string;
        age int;
    }
    func (p Person) printInfo() {
        putStringLn(p.name);
        putIntLn(p.age);
    }
    func main() {
        var people [2]Person = [2]Person{Person{name: "Anna", age: 19},Person{name: "Bill", age: 21}};
        people[0].printInfo();
        people[1].printInfo();
    }
        """
        self.assertTrue(TestCodeGen.test(input, "Anna\n19\nBill\n21\n", inspect.stack()[0].function))



# test 173
    def test_062(self):
        input = """
var prefix string;

type Person struct {
    name string;
    age int;
}

func getGreeting(name string) string {
    return prefix + name;
}

func (p Person) greet() string {
    return getGreeting(p.name);
}

func main() {
    var votien Person = Person{name: "Votien", age: 19};
    prefix := "Hello, my name is ";
    var msg string = votien.greet();
    putStringLn(msg);
}
        """
        self.assertTrue(TestCodeGen.test(input, "Hello, my name is Votien\n", inspect.stack()[0].function))

# test 174
    def test_063(self):
        input = """
func foo() boolean {
    putStringLn("foo");
    return true;
}

func main() {
    var a = true && foo()
    putBoolLn(a)
    var b = false && foo()
    putBoolLn(b)

}
        """
        self.assertTrue(TestCodeGen.test(input, "foo\ntrue\nfalse\n", inspect.stack()[0].function))

# test 175
    def test_064(self):
        input = """
func foo() boolean {
    putStringLn("foo");
    return false;
}

func main() {
    var a = true || foo()
    putBoolLn(a)
    var b = false || foo()
    putBoolLn(b)

}
        """
        self.assertTrue(TestCodeGen.test(input, "true\nfoo\nfalse\n", inspect.stack()[0].function))

# test 176
    def test_065(self):
        input = """
type Course interface {print(a [2] int);}
type PPL3 struct {number int;}
func (p PPL3) print(a [2] int) {putInt(a[0]);}

func main(){
    var a PPL3 = PPL3 {number: 10}
    a.print([2] int {10, 2})
}
        """
        self.assertTrue(TestCodeGen.test(input, "10", inspect.stack()[0].function))


    def test_066(self):
        input = """
type PPL2 struct {number [1][1][1]int;}
type PPL3 struct {ppl2 PPL2;}


func main(){
    var a [2][2]PPL3 
    a[0][1] := PPL3 {ppl2: PPL2 {number: [1][1][1]int{{{10}}} }}
    putInt(a[0][1].ppl2.number[0][0][0])
}
        """
        self.assertTrue(TestCodeGen.test(input, "10", inspect.stack()[0].function))


# def test_178(self):
    def test_067(self):
        input = """
var a [2] int;
func main() {
    putInt(a[0])
    putInt(a[1])
}
        """
        self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_068(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        


#     def test_069(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_070(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_071(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_072(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_073(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_074(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_075(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_076(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_077(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_078(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_079(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_080(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_081(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_082(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_083(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_084(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_085(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_086(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_087(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_088(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_089(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_090(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_091(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_092(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_093(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_094(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_095(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_096(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_097(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_098(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_099(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        



#     def test_100(self):
#         input = """
# var a [2] int;
# func main() {
#     putInt(a[0])
#     putInt(a[1])
# }
#         """
#         self.assertTrue(TestCodeGen.test(input, "00", inspect.stack()[0].function))        


    def test_178(self):
        input = """
        type Student struct {
            name string;
            score int;
        }
        
        func sortStudents(students [3]Student, n int) {
            for i := 0; i < n - 1; i += 1 {
                for j := 0; j < n - i - 1; j += 1 {
                    if (students[j].score > students[j + 1].score) {
                        var temp Student = students[j];
                        students[j] := students[j + 1];
                        students[j + 1] := temp;
                    }
                }
            }
        }
        
        func main(){
            var students = [3] Student {Student{name: "John", score: 85}, Student{name: "Alice", score: 92}, Student{name: "Bob", score: 78}};
            sortStudents(students, 3);
            for i := 0; i < 3; i += 1 {
                putString(students[i].name + " ");
                putInt(students[i].score);
                putLn();
            }
        }
        """
        self.assertTrue(TestCodeGen.test(input, "Bob 78\nJohn 85\nAlice 92\n", inspect.stack()[0].function))







    def test_177(self):
        input = """
type PPL2 struct {number [1][1][1]int;}
type PPL3 struct {ppl2 PPL2;}


func main(){
    var a [2][2]PPL3 
    a[0][1] := PPL3 {ppl2: PPL2 {number: [1][1][1]int{{{10}}} }}
    putInt(a[0][1].ppl2.number[0][0][0])
}
        """
        self.assertTrue(TestCodeGen.test(input, "10", inspect.stack()[0].function))





    def test_178(self):
        input = """
        type Student struct {
            name string;
            score int;
        }
        
        func sortStudents(students [3]Student, n int) {
            for i := 0; i < n - 1; i += 1 {
                for j := 0; j < n - i - 1; j += 1 {
                    if (students[j].score > students[j + 1].score) {
                        var temp Student = students[j];
                        students[j] := students[j + 1];
                        students[j + 1] := temp;
                    }
                }
            }
        }
        
        func main(){
            var students = [3] Student {Student{name: "John", score: 85}, Student{name: "Alice", score: 92}, Student{name: "Bob", score: 78}};
            sortStudents(students, 3);
            for i := 0; i < 3; i += 1 {
                putString(students[i].name + " ");
                putInt(students[i].score);
                putLn();
            }
        }
        """
        self.assertTrue(TestCodeGen.test(input, "Bob 78\nJohn 85\nAlice 92\n", inspect.stack()[0].function))




#     def test_182(self):
#         input = """
#         const MAX = 5;
        
#         func bfs(graph [MAX][MAX]int, start int){
#             var visited [MAX] boolean;
#             var queue [MAX] int;
#             var front = 0;
#             var rear = 0;
#             visited[start] := true;
#             queue[rear] := start;
#             rear += 1;
            
#             for front < rear {
#                 var u = queue[front]
#                 front += 1;
#                 putInt(u)
#                 putString(" ")
#                 for v := 0; v < MAX; v += 1{
#                     if (graph[u][v] == 1 && !visited[v]){
#                         visited[v] := true;
#                         queue[rear] := v;
#                         rear += 1;
#                     }
#                 }   
#             }
#         }
        
#         func main(){
#             var graph = [MAX][MAX] int {{0, 1, 0, 0, 0}, {1, 0, 1, 0, 0}, {0, 1, 0, 1, 0}, {0, 0, 1, 0, 1}, {0, 0, 0, 1, 0}};
#             bfs(graph, 0);
#         }
#         """
#         self.assertTrue(TestCodeGen.test(input, "0 1 2 3 4 ", inspect.stack()[0].function))








#     def test_183(self):
#         input = """
#         const MAX = 10;
        
#         func generateBinary(arr [MAX]int, n int, index int){
#             if (index == n) {
#                 for i := 0; i < n; i += 1 {
#                     putInt(arr[i]);
#                 }
#                 putLn();
#             } else {
#                 arr[index] := 0;
#                 generateBinary(arr, n, index + 1);
#                 arr[index] := 1;
#                 generateBinary(arr, n, index + 1);
#             }
#         }
        
#         func main() {
#             var n = 3;
#             var arr [MAX] int;
#             putString("All binary strings of length = ")
#             putInt(n)
#             putLn()
#             generateBinary(arr, n, 0);
#         }
#         """
#         self.assertTrue(TestCodeGen.test(input, """All binary strings of length = 3
# 000
# 001
# 010
# 011
# 100
# 101
# 110
# 111
# """, inspect.stack()[0].function))                        
        


    def test_181(self):
        input = """
func foo(){
    a := 5; // a chưa khai báo nên sẽ tương đương var a = 5
    putInt(a)
}

var a int = 10
        
func main(){
    foo()
    putInt(a)
}
        """
        self.assertTrue(TestCodeGen.test(input, "510", inspect.stack()[0].function))